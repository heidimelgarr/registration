"""
Student information for this assignment:


On my/our honor, Heidi Melgar, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: he3839
"""

import sys

# -----------------------PRINTING LOGIC, DON'T WORRY ABOUT THIS PART----------------------------
RESET_CHAR = "\u001b[0m"  # Code to reset the terminal color
COLOR_DICT = {
    "black": "\u001b[30m",
    "red": "\u001b[31m",
    "green": "\u001b[32m",
    "yellow": "\u001b[33m",
    "blue": "\u001b[34m",
    "magenta": "\u001b[35m",
    "cyan": "\u001b[36m",
    "white": "\u001b[37m",
}
BLOCK_CHAR = "\u2588"  # Character code for a block


def colored(text, color):
    """Wrap the string with the color code."""
    color = color.strip().lower()
    if color not in COLOR_DICT:
        raise ValueError(color + " is not a valid color!")
    return COLOR_DICT[color] + text


def print_block(color):
    """Print a block in the specified color."""
    print(colored(BLOCK_CHAR, color) * 2, end="")


# -----------------------PRINTING LOGIC, DON'T WORRY ABOUT THIS PART----------------------------


class Node:
    """
    Represents a node in a singly linked list.

    Instance Variables:
        data: The value or data stored in the node.
        next: The reference to the next node in the linked list (None by default).
    """

    def __init__(self, data, next_node=None):
        """
        Initializes a new node with the given data and a reference to the next node.

        Args:
            data: The data to store in the node.
            next: Optional; the next node in the linked list (None by default).
        """
        self.data = data
        self.next_node = next_node


class StackError(Exception):
    """
    Custom exception to be raised for errors related to stack operations.
    """


class Stack:
    """
    A class that implements a stack using a singly linked list.
    
    Instance Variables:
        _top: The top node of the stack.
        _size: The number of elements in the stack.
    """

    def __init__(self):
        """
        Initializes an empty stack with no elements.
        """
        self._top = None
        self._size = 0

    def peek(self):
        """
        Returns the value at the top of the stack without removing it.
        
        Raises:
            StackError: If the stack is empty, raises "Peek from empty stack.".
        
        Returns:
            The data stored in the top node of the stack.
        """
        if self.is_empty():
            raise StackError("Peek from empty stack.")
        return self._top.data

    def push(self, item):
        """
        Pushes a new item onto the top of the stack.
        
        Args:
            item: The data to push onto the stack.
        """
        new_node = Node(item)
        new_node.next_node = self._top
        self._top = new_node
        self._size += 1

    def pop(self):
        """
        Removes and returns the item at the top of the stack.
        
        Raises:
            StackError: If the stack is empty, raises "Pop from empty stack.".
        
        Returns:
            The data from the top node of the stack.
        """
        if self.is_empty():
            raise StackError("Pop from empty stack.")
        removed_data = self._top.data
        self._top = self._top.next_node
        self._size -= 1
        return removed_data

    def is_empty(self):
        """
        Checks if the stack is empty.
        
        Returns:
            True if the stack is empty, False otherwise.
        """
        return self._top is None

    def size(self):
        """
        Returns the number of items in the stack.
        
        Returns:
            The size of the stack as an integer.
        """
        return self._size


class QueueError(Exception):
    """
    Custom exception to be raised for errors related to queue operations.
    """


class Queue:
    """
    A class that implements a queue using a singly linked list with a tail.

    Instance Variables:
        _front: The beginning node of the queue.
        _rear: The end node of the queue.
        _size: The number of elements in the queue.
    """

    def __init__(self):
        """
        Initializes an empty queue with no elements.
        """
        self._front = None
        self._rear = None
        self._size = 0

    def peek(self):
        """
        Returns the value at the front of the queue without removing it.

        Raises:
            QueueError: If the queue is empty, raises "Peek from empty queue.".

        Returns:
            The data stored in the front node of the queue.
        """
        if self.is_empty():
            raise QueueError("Peek from empty queue.")
        return self._front.data

    def enqueue(self, item):
        """
        Enqueues a new item at the end of the queue.

        Args:
            item: The data to put at the end of queue.
        """
        new_node = Node(item)
        if self._rear is None:
            # empty
            self._front = new_node
            self._rear = new_node
        else:
            self._rear.next_node = new_node
            self._rear = new_node
            self._size += 1

    def dequeue(self):
        """
        Removes and returns the item at the front of the queue.

        Raises:
            QueueError: If the queue is empty, raises "Dequeue from empty queue.".

        Returns:
            The data from the front node of the queue.
        """
        if self.is_empty():
            raise QueueError("Dequeue from empty queue.")
        front_data = self._front.data
        self._front = self._front.next_node
        if self._front is None:  # If queue becomes empty
            self._rear = None
        self._size -= 1
        return front_data

    def is_empty(self):
        """
        Checks if the queue is empty.

        Returns:
            True if the queue is empty, False otherwise.
        """
        return self._size == 0

    def size(self):
        """
        Returns the number of items in the queue.

        Returns:
            The size of the queue as an integer.
        """
        return self._size


class ColoredVertex:
    """Class for a graph vertex."""

    def __init__(self, index, x, y, color):
        self.index = index
        self.x = x
        self.y = y
        self.color = color
        self.prev_color = color
        self.edges = []
        self.visited = False

    def add_edge(self, vertex_index):
        """Add an edge to another vertex."""
        self.edges.append(vertex_index)

    def visit_and_set_color(self, color):
        """Set the color of the vertex and mark it visited."""
        self.visited = True
        self.prev_color = self.color
        self.color = color
        print("Visited vertex " + str(self.index))

    def __str__(self):
        return f"index: {self.index}, color: {self.color}, x: {self.x}, y: {self.y}"


class ImageGraph:
    """Class for the graph."""

    def __init__(self, image_size):
        self.vertices = []
        self.image_size = image_size

    def print_image(self):
        """Print the image formed by the vertices."""
        img = [
            ["black" for _ in range(self.image_size)] for _ in range(self.image_size)
        ]

        # Fill img array
        for vertex in self.vertices:
            img[vertex.y][vertex.x] = vertex.color

        for line in img:
            for pixel in line:
                print_block(pixel)
            print()
        # Print new line/reset color
        print(RESET_CHAR)

    def reset_visited(self):
        """Reset the visited flag for all vertices."""
        for vertex in self.vertices:
            vertex.visited = False

    # Create the adjacency matrix.
    # Return the matrix at the end


    #  TO DO
    def create_adjacency_matrix(self):
        """
        Creates and returns the adjacency matrix for the graph.

        post: return a 2D list of integers representing the adjacency matrix.
        """
        # Initialize matrix
        matrix = []
        for _ in range(len(self.vertices)):
            row = [0] * len(self.vertices)
            matrix.append(row)

        # Set 1 for edges in the adjacency matrix
        for vertex in self.vertices:
            for neighbor in vertex.edges:
                matrix[vertex.index][neighbor] = 1
                matrix[neighbor][vertex.index] = 1

        return matrix

    # TO DO
    def bfs(self, start_index, color):
        """
        You must implement this algorithm using a Queue.

        Performs a Breadth-First Search (BFS) starting from a given vertex, changing
        all vertices that are adjacent and share the same color as the starting
        vertex's color to the given color. Think of how an image bucket fill will
        only change all same colored pixels that are in contact with each other.

        Do not remove the first 2 statements we provide.
        you may choose to call print_images in this method debugging yourself


        This method assumes that the pre conditions have been handled before
        calling this method.

        pre: start_index is a valid integer representing the index of the starting
             vertex in the vertices instance variable.
             color: The color to change vertices to during the BFS traversal

        post: every vertex that matches the start index's color will be recolored
              to the given color
        """
        self.reset_visited()
        print("Starting BFS; initial state:")
        self.print_image()
        # Create Queue
        pending = Queue()
        start_vertex = self.vertices[start_index]
        og_color = start_vertex.color

        # If same
        if og_color == color:
            return

        # Start BFS
        start_vertex.visited = True
        pending.enqueue(start_index)

        while not pending.is_empty():
            # Dequeue the next vertex to process
            curr_idx = pending.dequeue()
            curr_vertex = self.vertices[curr_idx]

            # If matches: recolor it
            if curr_vertex.color == og_color:
                curr_vertex.visit_and_set_color(color)

            # Explore all vertices
            for neighbor_idx in curr_vertex.edges:
                neighbor = self.vertices[neighbor_idx]

                # Skip alr visited neighbors
                if neighbor.visited:
                    continue

                # If neighbor matches: enqueue
                if neighbor.color == og_color:
                    neighbor.visited = True
                    pending.enqueue(neighbor_idx)
        self.print_image()

    # TO DO
    def dfs(self, start_index, color):
        """
        You must implement this algorithm using a Stack WITHOUT using recursion.

        Performs a Depth-First Search (DFS) starting from a given vertex, changing
        all vertices that are adjacent and share the same color as the starting
        vertex's color to the given color. Think of how an image bucket fill will
        only change all same colored pixels that are in contact with each other.

        Do not remove the first 2 statements we provide.
        you may choose to call print_images in this func method debugging yourself


        This method assumes that the pre conditions have been handled before
        calling this method.

        pre: start_index is a valid integer representing the index of the starting
             vertex in the vertices instance variable.
             color: The color to change vertices to during the DFS traversal

        post: every vertex that matches the start index's color will be recolored
              to the given color
        """
        self.reset_visited()
        print("Starting DFS; initial state:")
        self.print_image()

        to_visit = Stack()
        to_visit.push(start_index)

        og_color = self.vertices[start_index].color
        self.vertices[start_index].visit_and_set_color(color)

        while not to_visit.is_empty():
            current_index = to_visit.peek() # check
            current_vertex = self.vertices[current_index]

            neighbors_visited = True

            for neighbor_idx in current_vertex.edges:
                neighbor = self.vertices[neighbor_idx]
                if not neighbor.visited and neighbor.color == og_color:
                    neighbor.visit_and_set_color(color)
                    to_visit.push(neighbor_idx)
                    self.print_image()
                    neighbors_visited = False
                    break # don't go deeper

            if neighbors_visited:
                to_visit.pop() # now you're good

# TO DO
def create_graph(data):
    """
    Creates a Graph object from the given input data and parses the starting
    position and search color.

    pre: data is the entire inputted data as a single string.

    post: a tuple containing the ImageGraph instance, the starting position,
          and the search color.
    """
    lines = data.strip().split("\n")
    size = int(lines[0])
    num_v = int(lines[1])
    graph = ImageGraph(size)

    # Create vertices
    for i in range(2, 2 + num_v):
        v_info = lines[i].strip().split(",")
        graph.vertices.append(ColoredVertex(
            i - 2,
            int(v_info[0]),  # x
            int(v_info[1]),  # y
            v_info[2].strip()  # color
        ))

    # Create edges
    num_e = int(lines[2 + num_v])
    for i in range(3 + num_v, 3 + num_v + num_e):
        e_info = lines[i].strip().split(",")
        u = int(e_info[0])
        v = int(e_info[1])
        graph.vertices[u].add_edge(v)
        graph.vertices[v].add_edge(u)

    # Start index and search color
    start = lines[3 + num_v + num_e].strip().split(",")
    start_idx = int(start[0])
    search_color = start[1].strip()

    return graph, start_idx, search_color


# TO DO
def main():
    """
    The main function that drives the program execution.

    This function will not be tested, but you should
    implement it to test your code visually.
    """

    # read all input as a single string.
    data = sys.stdin.read()

    # create graph, passing in data
    img_graph, start_index, search_color = create_graph(data)

    # print adjacency matrix in a readable format (maybe row by row)
    print("Adjacency Matrix:")
    adj_matrix = img_graph.create_adjacency_matrix()
    for row in adj_matrix:
        print(row)

    # run bfs
    print("\nRunning BFS:")
    img_graph.bfs(start_index, search_color)

    # reset by creating graph again
    img_graph, start_index, search_color = create_graph(data)

    # run dfs
    print("\nRunning DFS:")
    img_graph.dfs(start_index, search_color)


if __name__ == "__main__":
    main()
